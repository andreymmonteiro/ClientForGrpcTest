// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: User.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace gRPCTest.Protos {
  public static partial class User
  {
    static readonly string __ServiceName = "User";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::gRPCTest.Protos.GetUserRequest> __Marshaller_GetUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gRPCTest.Protos.GetUserRequest.Parser));
    static readonly grpc::Marshaller<global::gRPCTest.Protos.UserProDto> __Marshaller_UserProDto = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gRPCTest.Protos.UserProDto.Parser));
    static readonly grpc::Marshaller<global::gRPCTest.Protos.CreateUserRequest> __Marshaller_CreateUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gRPCTest.Protos.CreateUserRequest.Parser));
    static readonly grpc::Marshaller<global::gRPCTest.Protos.UserCreateResultProtoDto> __Marshaller_UserCreateResultProtoDto = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gRPCTest.Protos.UserCreateResultProtoDto.Parser));
    static readonly grpc::Marshaller<global::gRPCTest.Protos.UpdateUserRequest> __Marshaller_UpdateUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gRPCTest.Protos.UpdateUserRequest.Parser));
    static readonly grpc::Marshaller<global::gRPCTest.Protos.UserUpdateResultProtoDto> __Marshaller_UserUpdateResultProtoDto = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gRPCTest.Protos.UserUpdateResultProtoDto.Parser));
    static readonly grpc::Marshaller<global::gRPCTest.Protos.DeleteUserRequest> __Marshaller_DeleteUserRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gRPCTest.Protos.DeleteUserRequest.Parser));
    static readonly grpc::Marshaller<global::gRPCTest.Protos.DeleteUserResponse> __Marshaller_DeleteUserResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gRPCTest.Protos.DeleteUserResponse.Parser));

    static readonly grpc::Method<global::gRPCTest.Protos.GetUserRequest, global::gRPCTest.Protos.UserProDto> __Method_Get = new grpc::Method<global::gRPCTest.Protos.GetUserRequest, global::gRPCTest.Protos.UserProDto>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_GetUserRequest,
        __Marshaller_UserProDto);

    static readonly grpc::Method<global::gRPCTest.Protos.CreateUserRequest, global::gRPCTest.Protos.UserCreateResultProtoDto> __Method_Post = new grpc::Method<global::gRPCTest.Protos.CreateUserRequest, global::gRPCTest.Protos.UserCreateResultProtoDto>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Post",
        __Marshaller_CreateUserRequest,
        __Marshaller_UserCreateResultProtoDto);

    static readonly grpc::Method<global::gRPCTest.Protos.UpdateUserRequest, global::gRPCTest.Protos.UserUpdateResultProtoDto> __Method_Put = new grpc::Method<global::gRPCTest.Protos.UpdateUserRequest, global::gRPCTest.Protos.UserUpdateResultProtoDto>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Put",
        __Marshaller_UpdateUserRequest,
        __Marshaller_UserUpdateResultProtoDto);

    static readonly grpc::Method<global::gRPCTest.Protos.DeleteUserRequest, global::gRPCTest.Protos.DeleteUserResponse> __Method_Delete = new grpc::Method<global::gRPCTest.Protos.DeleteUserRequest, global::gRPCTest.Protos.DeleteUserResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_DeleteUserRequest,
        __Marshaller_DeleteUserResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::gRPCTest.Protos.UserReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for User</summary>
    public partial class UserClient : grpc::ClientBase<UserClient>
    {
      /// <summary>Creates a new client for User</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public UserClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for User that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public UserClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected UserClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected UserClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::gRPCTest.Protos.UserProDto Get(global::gRPCTest.Protos.GetUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::gRPCTest.Protos.UserProDto Get(global::gRPCTest.Protos.GetUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::gRPCTest.Protos.UserProDto> GetAsync(global::gRPCTest.Protos.GetUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::gRPCTest.Protos.UserProDto> GetAsync(global::gRPCTest.Protos.GetUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      public virtual global::gRPCTest.Protos.UserCreateResultProtoDto Post(global::gRPCTest.Protos.CreateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Post(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::gRPCTest.Protos.UserCreateResultProtoDto Post(global::gRPCTest.Protos.CreateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Post, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::gRPCTest.Protos.UserCreateResultProtoDto> PostAsync(global::gRPCTest.Protos.CreateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PostAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::gRPCTest.Protos.UserCreateResultProtoDto> PostAsync(global::gRPCTest.Protos.CreateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Post, null, options, request);
      }
      public virtual global::gRPCTest.Protos.UserUpdateResultProtoDto Put(global::gRPCTest.Protos.UpdateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Put(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::gRPCTest.Protos.UserUpdateResultProtoDto Put(global::gRPCTest.Protos.UpdateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Put, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::gRPCTest.Protos.UserUpdateResultProtoDto> PutAsync(global::gRPCTest.Protos.UpdateUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PutAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::gRPCTest.Protos.UserUpdateResultProtoDto> PutAsync(global::gRPCTest.Protos.UpdateUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Put, null, options, request);
      }
      public virtual global::gRPCTest.Protos.DeleteUserResponse Delete(global::gRPCTest.Protos.DeleteUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::gRPCTest.Protos.DeleteUserResponse Delete(global::gRPCTest.Protos.DeleteUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::gRPCTest.Protos.DeleteUserResponse> DeleteAsync(global::gRPCTest.Protos.DeleteUserRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::gRPCTest.Protos.DeleteUserResponse> DeleteAsync(global::gRPCTest.Protos.DeleteUserRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override UserClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new UserClient(configuration);
      }
    }

  }
}
#endregion
